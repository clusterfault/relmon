#!/usr/bin/env bash 

set -o errexit
set -o nounset
set -o pipefail

TARGET_CONFIGS_DIR="targets"
CONFIG_FILE="config.json"

function get_latest_release {
    curl --silent https://api.github.com/repos/immich-app/immich/releases/latest | jq -r '.tag_name'
}

function fetch_release_files {

    releases="$1" 	
    # Fetch files matching the pattern for any uncommitted versions for the target 
    for release in $releases; do

	echo""
	echo "Fetching files for $target version $release"

	release_assets_json="$( echo "$target_release_list_json" | jq -r --arg RELEASE "$release" '.[] | select(.tag_name|test($RELEASE)).assets' )"
	# Loop through patterns for each releases
	for file_patt in $( jq -r .file_patts[] ${target_dir}/${CONFIG_FILE} ); do
	    echo "    with pattern \"$file_patt\""
		
	    # Get list of files 
	    files="$( echo "$release_assets_json" | jq -r --arg FILE_PATT "$file_patt" '.[] | select(.name|test($FILE_PATT))| .browser_download_url')"

	    # Download the files 
	    for file in $files; do
		wget -q -O $target_dir/files/"$(basename $file)" $file 
		git add targets/$target/files/"$(basename $file)"
	    done
	done
	echo "Done"

	echo ""
	echo "Comitting the fetched files to tracking repo"
	echo "$release" > "$target_dir/files/version"
	git add targets/$target/files/version
	git commit -m "[$target] updated for version $release" 

     done
}

function init {

    echo ""
    echo "Initializing commits with latest version"

    echo ""
    echo "Creating directory to track release files"
    mkdir -p "$target_dir/files"

    latest_release=$(get_latest_release) 
    fetch_release_files "$latest_release"
}

echo ""
echo "Iterating through targets to get release updates"
# Loop through the targets inside the repo
for target_dir in "${TARGET_CONFIGS_DIR}"/*; do

    target="$(basename $target_dir)"
    echo ""
    echo "Target $target"
   
    # Get target release repo from config
    target_release_repo="$( jq -r .repo ${target_dir}/${CONFIG_FILE} )"

    # Use Github API to get list for releaes for the repo
    target_release_list_json="$( curl --silent https://api.github.com/repos/$target_release_repo/releases )"

    # if there are existing versions committed
    # find uncommitted versions and then work our way
    # back to the lastest release
    # If previous release not found in release list then error out
    # CAUTION: Does not consider pagination
    if [ -f "${target_dir}/files/version" ]; then

        # Get previously committed release
	    prev_version="$(cat ${target_dir}/files/version)"

	    releases_list="$( echo $target_release_list_json | jq -r '.[].tag_name' )"

	    # Based on previously committed release version compute list of uncommitted releases
	    unprocessed_releases=""
	    found="no"
	    for release in $releases_list; do
            if [ "$release" == "$prev_version" ]; then
		        found="yes"
	            break;
	    fi
	    unprocessed_releases="${release}"$'\n'"${unprocessed_releases}"
        done

	# if previous(committed) version not found in the list error out for manual intervention
	if [ "$found" == "no" ];
	then
	   echo "Previously comitted version not found in the list of recent releases"
	   exit 1
	fi

	echo ""
	echo "Last committed version for $target was $prev_version"
        if [ -n "$unprocesses_releases ]; then
            fetch_release_files "$unprocessed_releases"
        else
            echo "Latest release already comitted"
        fi
    else
	echo ""
        echo "No previously comitted versions found"
	init
    fi
done
echo ""
echo "Pushing updates to remote"
git push
echo ""
echo "Processed all targets"

